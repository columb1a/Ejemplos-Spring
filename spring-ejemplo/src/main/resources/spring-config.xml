<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

	<!-- Declaracion de los diferentes beans -->

	<!-- Datos: Todos los beans en Spring son de tipo Singleton Esto se puede 
		cambiar usando el scope Prototype -->

	<!-- malabarista Duke usando constructor vacio -->
	<!-- <bean id="duke" class="clasesImplementadas.Juggler" /> -->

	<!-- malabarista Duke usando constructor con parametros malabarea usando 
		15 bolsas -->
	<bean id="duke" class="juggler.Juggler">
		<constructor-arg value="15" />
	</bean>

	<!-- Poema sonneto 29 de Shakespeare. Sonnet29 implementa Poem -->
	<bean id="sonnet29" class="juggler.Sonnet29" />

	<!-- Duke ahora es capaz de mientras malabarea 15 bolsas, recita el sonneto 
		29. A travez del constructor pasamos el soneto 29, que es injectado a la 
		clase PoeticJuggler. Notar que podriamos haber cambiado el poema que se recitara, 
		pero no es necesario cambiar la declaración de la variable de tipo Poem que 
		esta dentro de la clase PoeticJuggler -->
	<bean id="poeticDuke" class="juggler.PoeticJuggler">
		<constructor-arg value="15" />
		<constructor-arg ref="sonnet29" />
	</bean>

	<!-- Ejemplo de bean usando un Singleton. Para manejar el singleton se usa 
		el factory-method pasandole el metodo que hace get de la instancia -->
	<bean id="theStage" class="stage.Stage" factory-method="getInstance" />

	<!-- Ejemplo de bean usando scope prototype.Implica que se creará una nueva 
		instancia de este bean cada vez que se llame -->
	<bean id="ticket" class="com.springinaction.springidol.Ticket"
		scope="prototype" />

	<!-- Ejemplo de bean usado para llamar a los metodos turn ON/OFF lights -->
	<bean id="auditorium" class="auditorium.Auditorium" init-method="turnOnLights"
		destroy-method="turnOffLights" />

	<!-- Ejemplo de bean Kenny el instrumentista, usado para mostrar como inyectar 
		dependencias usando setters y getters -->
	<bean id="kenny" class="instrumentalist.Instrumentalist">
		<property name="song" value="Jingle Bells" />
		<property name="age" value="37" />
	</bean>

	<bean id="saxophone" class="instrumentalist.Saxophone" />

	<bean id="piano" class="instrumentalist.Piano" />

	<!-- Ejemplo de bean donde se usa el parametro "ref" para referenciar al 
		bean saxophone. Tambien podriamos referenciar al bean Piano de manera tal 
		que simplemente cambiando la referencia al bean Kenny puede tocar diferentes 
		instrumentos -->
	<bean id="kenny_playing_instruments" class="instrumentalist.Instrumentalist">
		<property name="song" value="Jingle Bells" />
		<property name="instrument" ref="piano" />
	</bean>

	<!-- Ejemplo de bean en donde se usa un INNER bean, es decir un bean donde sus properties 
		usan directamente la declaración de un bean como valor. Con esto se logra 
		que otros beanes no tengan acceso el bean que esta siendo asociado a la property 
		en cuestion -->
	<bean id="kenny_inner_version" class="instrumentalist.Instrumentalist">
		<property name="song" value="Jingle Bells" />
		<property name="instrument">
			<bean class="instrumentalist.Guitar" />
		</property>
	</bean>

    <!-- Ejemplo de bean donde carl es un imitador de las canciones que kenny toca.
     	 Lo interesante de este bean, es que se usa SpEL (Spring Expression Languague)
     	 el cual esta compuesto por  "#{}". En este ejemplo accedo al bean de nombre:
     	 kenny_playing_instruments y luego, a la propiedad song, obteniendo el valor
     	 de esta propiedad.-->
	<bean id="carl" class="com.springinaction.springidol.Instrumentalist">
		<property name="song" value="#{kenny_playing_instruments.song}" />
	</bean>

</beans>